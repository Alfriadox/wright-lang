

import wright::box::Box;
import wright::box::NullableBox;

type Option<type T> {
    func some(t: T) -> Self;
    func none() -> Self;
    func is_some(&self) -> bool;
    func is_none(&self) -> bool;
    # ... etc
}

union DefaultOptionRepresentation<type T> { some: T | none: void };

implement Option<T> as DefaultOptionRepresentation<T> {
    const func some(t: T) -> Self {
        DefaultOptionRepresentation { some: t }
    }

    const func none() -> Self {
        DefaultOptionRepresentation { none: void }
    }

    const func is_some(&self) -> bool {
        self is DefaultOptionRepresentation.some
    }

    const func is_none(&self) -> bool {
        self is DefaultOptionRepresentation.none
    }

    # ... etc
}

implement Option<Box<T>> as NullableBox<T> {
    func some(t: T) -> Self {
        Box::new(t) as NullableBox
    }

    const func none() -> Self {
        NullableBox::null()
    }

    const fn is_some(&self) -> bool {
        !self.is_null()
    }

    const fn is_none(&self) -> bool {
        self.is_null()
    }
}

