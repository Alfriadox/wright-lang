
import wright.cmp;


type KnownMax<type T, const MAX: T> 
where T: cmp.Ord 
is T constrain T <= MAX;

type KnownMin<type T, const MIN: T>
where T: cmp.Ord
is T constrain T >= MIN;

## --- OR --- 
 
constraint<type T> KnownMax(t: T) as T 
where T: cmp.Ord {
    t <= self
} 

constraint<type T> KnownMin(t: T) as T
where T: cmp.Ord {
    t >= self
}

constraint<type T> KnownRange(t: T) as void 
where T: KnownMin + KnownMax 
{
    ## The maximum value that the constrained T could be.
    max_inclusive: T,
    ## The minimum value that the constrained T could be. 
    min_inclusive: T,
}



constraint<type T> KnownMax(a: T, b: T) 


... not sure yet what I want syntax to look like here. 
