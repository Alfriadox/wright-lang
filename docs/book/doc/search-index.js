var searchIndex = {};
searchIndex["wright"] = {"doc":"","items":[[0,"lexer","wright","",null,null],[5,"lex_lines","wright::lexer","Lexer for wright. Splits input file into",null,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[0,"parser","wright","",null,null],[3,"Parser","wright::parser","",null,null],[3,"Type","","",null,null],[4,"BinaryOpTypes","","",null,null],[13,"Addition","","",0,null],[13,"Subtraction","","",0,null],[13,"Multiplication","","",0,null],[13,"Division","","",0,null],[13,"Modulo","","",0,null],[13,"Increment","","",0,null],[13,"Decrement","","",0,null],[13,"IsEq","","",0,null],[13,"IsNotEq","","",0,null],[13,"IsGE","","",0,null],[13,"IsLE","","",0,null],[13,"Greater","","",0,null],[13,"Less","","",0,null],[13,"And","","",0,null],[13,"Or","","",0,null],[13,"Xor","","",0,null],[4,"UnaryOpTypes","","",null,null],[13,"Negation","","",1,null],[13,"Not","","",1,null],[4,"Expr","","",null,null],[13,"Literal","","",2,null],[13,"Id","","",2,null],[13,"BinaryOp","","",2,null],[13,"UnaryOp","","",2,null],[13,"FunctionCall","","",2,null],[4,"Stmnt","","",null,null],[13,"VarDec","","",3,null],[13,"Assign","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"binaryoptypes"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unaryoptypes"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stmnt"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"parser"}}],[0,"argparser","wright","The command line argument parser for Wright",null,null],[5,"argparse","wright::argparser","Parse arguments passed to the wright command. Returns `None` if there is no action to take after parsing arguments. Otherwise, it will return `Some(file)` where `file` is a String filename to be interpreted.",null,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[5,"version","","Prints version string for wright. Should be identical to cargo version information.",null,{"inputs":[],"output":null}],[5,"help","","Prints help information for wright",null,{"inputs":[],"output":null}],[0,"run","wright","",null,null],[3,"IOError","wright::run","Raised when Wright is unable to read from the given file.",null,null],[5,"interpret","","Interprets the Wright file at the file name passed into the argument. Returns the operating system exit code (Generally 0 for a success, 1 for a failure.).",null,{"inputs":[{"name":"string"}],"output":{"name":"i32"}}],[11,"new","","Constructor.",6,{"inputs":[{"name":"string"},{"name":"wrighterrorlevels"}],"output":{"name":"ioerror"}}],[11,"get_info","","",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type","","",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_level","","",6,{"inputs":[{"name":"self"}],"output":{"name":"wrighterrorlevels"}}],[0,"version","wright","",null,null],[5,"get_version","wright::version","`get_version()` returns Wright's version as a string. This should be identical to its version in cargo.",null,{"inputs":[],"output":{"name":"string"}}],[17,"VERSION","","`VERSION` const is a version constant in the form of a `&'static str`",null,null],[0,"errors","wright","Trait and Enum that make up the Wright interpreter error system. This is used all throughout the Wright project for error reporting and execution.",null,null],[4,"WrightErrorLevels","wright::errors","Levels of Wright's errors. Warning is for non-fatal interpreter warnings. Fatal is for process terminating interpreter errors. Panic is for fatal panics raised by the user program.",null,null],[13,"Warning","","",7,null],[13,"Fatal","","",7,null],[13,"Panic","","",7,null],[8,"WrightError","","Trait for Wright's compiler errors. Each error should have its own implementation of this.",null,null],[10,"new","","The constructor method.",8,{"inputs":[{"name":"string"},{"name":"wrighterrorlevels"}],"output":{"name":"self"}}],[10,"get_info","","Returns information about the error as a String. Usually a formatted output statement referencing the line, and sometimes location, where the error was raised.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_type","","Return the type of error, usually a short error name like \"IOError\" or \"ParserError\"",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_level","","Returns the error level as an instance of `WrightErrorLevels`",8,{"inputs":[{"name":"self"}],"output":{"name":"wrighterrorlevels"}}],[11,"panic","","Executes the error, terminating the program and returning a failed exit code (1).",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"wrighterrorlevels"}}]],"paths":[[4,"BinaryOpTypes"],[4,"UnaryOpTypes"],[4,"Expr"],[4,"Stmnt"],[3,"Type"],[3,"Parser"],[3,"IOError"],[4,"WrightErrorLevels"],[8,"WrightError"]]};
initSearch(searchIndex);
