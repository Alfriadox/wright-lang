initSidebarItems({"enum":[["ArithmeticOperator","Arithmetic Operators."],["Assigner","Different types of assignments, one for mutability, the other for immutability."],["BinaryOperator","Enum representing binary operators."],["Expression","Expression enum."],["LogicalOperator","Logical Operators."],["RelationalOperator","Relational Operators."],["Statement","Enum for statements."],["UnaryOperator","Unary Operators."]],"struct":[["Assignment","Assignment statement."],["BinaryExpr","Binary Expression."],["Block","Block of statements."],["Break","Break statement struct."],["Call","Function call."],["Cast","Cast expression struct (i.e. \"value to type\")."],["ClassDeclaration","Class declaration struct."],["Condition","Single conditional statement."],["Conditional","Conditional block."],["Constant","Constant struct."],["Continue","Continue statement struct."],["EnumDeclaration","Enum (tagged union) declaration struct."],["ForLoop","For loop struct."],["FunctionDefinition","Function defining struct."],["Identifier","Identifier struct."],["Literal","Literal struct."],["LoopAnnotation","Loop annotation struct."],["Module","Module struct. Module is not in `Statement` because users should not be able to define modules in a file. Each Wright file should be it's own independent Module."],["Return","Return statement struct."],["Sub","Subfield access expression. (i.e. \"left.right\")."],["TraitDeclaration","Trait declaration struct."],["Type","Type struct."],["UnaryExpr","Unary Expression."],["WhileLoop","While loop struct."]]});